{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Countdown.svelte",
    "InGame.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { questionSets } from \"../stores\";\nimport MainMenu from \"./MainMenu.svelte\";\nimport InGame from \"./InGame.svelte\";\nimport PostGame from \"./PostGame.svelte\";\nimport { onMount } from \"svelte\";\nimport { selectQuestionsForGame } from \"../questions\";\n;\nimport { fetchQuestions } from \"../spreadsheetApi\";\nimport { questionsInGame } from \"../gameSettings\";\nconst defaultSheet = \"Бхагавад-гита 1-6\";\nonMount(async () => {\n    $questionSets = {\n        default: selectQuestionsForGame(await fetchQuestions(defaultSheet), questionsInGame, []),\n    };\n});\nlet gameStage = \"MAIN-MENU\";\nlet selectedQuestions;\nlet gameResult;\nconst startGame = ({ detail }) => {\n    selectedQuestions = $questionSets.default;\n    gameStage = \"IN-GAME\";\n};\nconst endGame = ({ detail }) => {\n    gameResult = detail;\n    gameStage = \"POST-GAME\";\n};\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  {#if gameStage === 'IN-GAME'}\n    <InGame {selectedQuestions} on:endGame={endGame} />\n  {:else if gameStage === 'POST-GAME'}\n    <PostGame {gameResult} on:playAgain={startGame} />\n  {:else}\n    <MainMenu on:startGame={startGame} />\n  {/if}\n</main>\n",
    "<script lang=\"ts\">import { createEventDispatcher, onMount } from \"svelte\";\nconst dispatch = createEventDispatcher();\nexport let value;\nexport let tickMillis = 1000;\nexport let blinkAt = 5;\nexport let stopAt = 1;\nexport const reset = (newValue) => {\n    clearInterval(interval);\n    value = newValue;\n    interval = setInterval(tick, tickMillis);\n};\nconst tick = () => {\n    if (value === stopAt)\n        return dispatch(\"expire\");\n    value -= 1;\n};\n// TODO: Why does it carry over the ticking interval when the component is rerendered?\nlet interval;\nonMount(() => {\n    interval = setInterval(tick, tickMillis);\n    return () => clearInterval(interval);\n});\n</script>\n\n<style>\n  .blinking {\n    color: red;\n    animation: blinker 0.75s linear infinite;\n  }\n  @keyframes blinker {\n    50% {\n      opacity: 0;\n    }\n  }\n</style>\n\n<h3 class={value > blinkAt ? '' : 'blinking'}>{value}</h3>\n",
    "<script lang=\"ts\">;\nimport { createEventDispatcher } from \"svelte\";\nimport { timeToSelectAnswer } from \"../gameSettings\";\nimport Countdown from \"./Countdown.svelte\";\nimport { randomElement, shuffle } from \"../util\";\nconst dispatch = createEventDispatcher();\nexport let selectedQuestions;\nlet currentQuestionNumber = 1;\nlet timer, currentQuestion, answerChoices;\n$: {\n    currentQuestion = selectedQuestions[currentQuestionNumber - 1];\n    answerChoices = shuffle([...currentQuestion.incorrectOptions, currentQuestion.correctAnswer]);\n}\nconst handleChoice = (e) => {\n    if (currentQuestion.correctAnswer !== e.target.textContent)\n        return endGame(Outcomes.INCORRECT_ANSWER);\n    if (currentQuestionNumber === selectedQuestions.length)\n        return endGame(Outcomes.WIN);\n    currentQuestionNumber += 1;\n    timer.reset(timeToSelectAnswer);\n};\nconst helpOptions = {\n    fiftyFifty: {\n        displayName: \"50/50\",\n        handler() {\n            currentQuestion.incorrectOptions = [randomElement(currentQuestion.incorrectOptions)];\n            helpOptions.fiftyFifty.available = false;\n        },\n        available: true,\n    },\n};\nvar Outcomes;\n(function (Outcomes) {\n    Outcomes[Outcomes[\"WIN\"] = 0] = \"WIN\";\n    Outcomes[Outcomes[\"INCORRECT_ANSWER\"] = 1] = \"INCORRECT_ANSWER\";\n    Outcomes[Outcomes[\"TIME_EXPIRED\"] = 2] = \"TIME_EXPIRED\";\n})(Outcomes || (Outcomes = {}));\nconst endGame = (outcome) => {\n    let details;\n    switch (outcome) {\n        case Outcomes.WIN:\n            details = { win: true };\n            break;\n        case Outcomes.INCORRECT_ANSWER:\n            details = {\n                win: false,\n                failedQuestion: currentQuestion,\n                questionNumber: currentQuestionNumber,\n            };\n            break;\n        case Outcomes.TIME_EXPIRED:\n            details = {\n                win: false,\n                failedQuestion: currentQuestion,\n                questionNumber: currentQuestionNumber,\n            };\n            break;\n    }\n    dispatch(\"endGame\", details);\n};\n</script>\n\n<style>\n  pre {\n    color: orange;\n  }\n</style>\n\n<div>\n  <pre>Вопрос #{currentQuestionNumber}</pre>\n  <pre>{currentQuestion.questionText}</pre>\n  {#each answerChoices as choice}<button on:click={handleChoice}>{choice}</button>{/each}\n  <Countdown value={timeToSelectAnswer} bind:this={timer} on:expire={() => endGame(Outcomes.TIME_EXPIRED)} />\n  <hr />\n  {#each Object.entries(helpOptions) as [key, { available, handler, displayName }]}\n    <button on:click={handler} disabled={!available} id={key}>{displayName}</button>\n  {/each}\n</div>\n"
  ],
  "names": [],
  "mappings": "AA6BE,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AASD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC;ACtBD,SAAS,eAAC,CAAC,AACT,KAAK,CAAE,GAAG,CACV,SAAS,CAAE,sBAAO,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,AAC1C,CAAC,AACD,WAAW,sBAAQ,CAAC,AAClB,GAAG,AAAC,CAAC,AACH,OAAO,CAAE,CAAC,AACZ,CAAC,AACH,CAAC;AC8BD,GAAG,eAAC,CAAC,AACH,KAAK,CAAE,MAAM,AACf,CAAC"
}